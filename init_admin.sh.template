#!/bin/bash

# ThinkSo 安全管理员初始化脚本模板
# 
# 使用前请：
# 1. 复制此文件为 init_admin.sh
# 2. 设置环境变量或修改下方配置
# 3. 运行: chmod +x init_admin.sh && ./init_admin.sh
#
# 环境变量说明：
# - ADMIN_EMAIL: 管理员邮箱 (默认: admin@example.com)
# - ADMIN_PASSWORD: 管理员密码 (必须设置)
# - API_BASE_URL: API基础URL (默认: https://thinktree-backend.onrender.com)
# - INVITATION_COUNT: 创建邀请码数量 (默认: 5)

set -e  # 出错时立即退出

# 颜色输出函数
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[信息]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[成功]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[警告]${NC} $1"
}

log_error() {
    echo -e "${RED}[错误]${NC} $1"
}

# 获取配置
get_config() {
    # 从环境变量或默认值获取配置
    API_BASE="${API_BASE_URL:-https://thinktree-backend.onrender.com}"
    ADMIN_EMAIL="${ADMIN_EMAIL:-admin@example.com}"
    INVITATION_COUNT="${INVITATION_COUNT:-5}"
    
    # 密码必须通过环境变量设置或交互式输入
    if [ -z "$ADMIN_PASSWORD" ]; then
        echo -n "请输入管理员密码: "
        read -s ADMIN_PASSWORD
        echo
    fi
    
    if [ -z "$ADMIN_PASSWORD" ]; then
        log_error "管理员密码不能为空"
        exit 1
    fi
    
    log_info "配置信息:"
    log_info "  API地址: $API_BASE"
    log_info "  管理员邮箱: $ADMIN_EMAIL"
    log_info "  邀请码数量: $INVITATION_COUNT"
    echo
}

# 检查依赖
check_dependencies() {
    if ! command -v curl &> /dev/null; then
        log_error "curl 命令未找到，请先安装 curl"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        log_warning "建议安装 jq 以获得更好的JSON处理体验"
    fi
}

# 发送HTTP请求的安全包装函数
safe_curl() {
    local method="$1"
    local url="$2"
    local data="$3"
    local headers="$4"
    
    if [ -n "$data" ]; then
        curl -s -w "\nHTTP_STATUS:%{http_code}" \
             -X "$method" \
             -H "Content-Type: application/json" \
             ${headers:+-H "$headers"} \
             -d "$data" \
             --connect-timeout 30 \
             --max-time 60 \
             "$url"
    else
        curl -s -w "\nHTTP_STATUS:%{http_code}" \
             -X "$method" \
             -H "Content-Type: application/json" \
             ${headers:+-H "$headers"} \
             --connect-timeout 30 \
             --max-time 60 \
             "$url"
    fi
}

# 创建管理员用户
create_admin_user() {
    log_info "步骤1：创建管理员用户..."
    
    local admin_data=$(cat <<EOF
{
  "email": "$ADMIN_EMAIL",
  "password": "$ADMIN_PASSWORD",
  "invitation_code": "ADMIN_INIT",
  "display_name": "ThinkSo Admin"
}
EOF
)
    
    local response=$(safe_curl "POST" "$API_BASE/api/auth/register" "$admin_data")
    local http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
    local response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')
    
    log_info "HTTP状态码: $http_status"
    
    if [ "$http_status" != "200" ]; then
        log_error "管理员用户创建失败"
        log_error "响应内容: $response_body"
        log_warning "可能的原因:"
        log_warning "1. 邮件服务配置有问题"
        log_warning "2. 后端没有 ADMIN_INIT 特殊邀请码支持"
        log_warning "3. 数据库连接问题"
        log_warning "4. 管理员用户已存在"
        return 1
    fi
    
    log_success "管理员用户创建成功！"
    return 0
}

# 管理员登录
login_admin() {
    log_info "步骤2：管理员登录..."
    
    local login_data=$(cat <<EOF
{
  "email": "$ADMIN_EMAIL",
  "password": "$ADMIN_PASSWORD"
}
EOF
)
    
    local response=$(safe_curl "POST" "$API_BASE/api/auth/login" "$login_data")
    local http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
    local response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')
    
    if [ "$http_status" != "200" ]; then
        log_error "管理员登录失败"
        log_error "响应内容: $response_body"
        return 1
    fi
    
    # 提取token (使用更安全的方式)
    if command -v jq &> /dev/null; then
        TOKEN=$(echo "$response_body" | jq -r '.access_token // empty')
    else
        TOKEN=$(echo "$response_body" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
    fi
    
    if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
        log_error "无法提取访问令牌"
        log_error "登录响应: $response_body"
        return 1
    fi
    
    log_success "管理员登录成功！"
    log_info "Token: ${TOKEN:0:20}..."
    return 0
}

# 创建邀请码
create_invitation_codes() {
    log_info "步骤3：创建邀请码..."
    
    local codes=()
    local success_count=0
    
    for i in $(seq 1 $INVITATION_COUNT); do
        log_info "创建邀请码 #$i..."
        
        local invitation_data=$(cat <<EOF
{
  "description": "管理员创建的邀请码 #$i",
  "expires_at": null
}
EOF
)
        
        local response=$(safe_curl "POST" "$API_BASE/api/invitations/create" "$invitation_data" "Authorization: Bearer $TOKEN")
        local http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
        local response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')
        
        if [ "$http_status" = "200" ]; then
            # 提取邀请码
            if command -v jq &> /dev/null; then
                local invitation_code=$(echo "$response_body" | jq -r '.code // empty')
            else
                local invitation_code=$(echo "$response_body" | grep -o '"code":"[^"]*"' | cut -d'"' -f4)
            fi
            
            if [ -n "$invitation_code" ] && [ "$invitation_code" != "null" ]; then
                codes+=("$invitation_code")
                log_success "邀请码创建成功: $invitation_code"
                success_count=$((success_count + 1))
                
                # 保存第一个邀请码用于测试
                if [ $i -eq 1 ]; then
                    FIRST_CODE="$invitation_code"
                fi
            else
                log_error "无法从响应中提取邀请码"
            fi
        else
            log_error "邀请码创建失败"
            log_error "响应内容: $response_body"
        fi
    done
    
    echo
    log_info "邀请码创建完成: $success_count/$INVITATION_COUNT"
    
    # 输出所有创建的邀请码
    if [ ${#codes[@]} -gt 0 ]; then
        echo
        log_success "创建的邀请码列表:"
        for i in "${!codes[@]}"; do
            echo "  $((i+1)). ${codes[$i]}"
        done
    fi
}

# 主函数
main() {
    echo "=== ThinkSo 安全管理员初始化脚本 ==="
    echo
    
    # 检查依赖
    check_dependencies
    
    # 获取配置
    get_config
    
    # 确认执行
    echo -n "确认执行管理员初始化？(y/N): "
    read -r confirm
    if [[ ! "$confirm" =~ ^[Yy]([Ee][Ss])?$ ]]; then
        log_info "操作已取消"
        exit 0
    fi
    echo
    
    # 执行初始化步骤
    if ! create_admin_user; then
        log_error "管理员用户创建失败，脚本终止"
        exit 1
    fi
    
    echo
    log_info "等待5秒让服务器处理..."
    sleep 5
    
    if ! login_admin; then
        log_error "管理员登录失败，脚本终止"
        exit 1
    fi
    
    echo
    create_invitation_codes
    
    # 输出最终结果
    echo
    echo "=== 初始化完成 ==="
    log_success "管理员邮箱: $ADMIN_EMAIL"
    
    if [ -n "$FIRST_CODE" ]; then
        echo
        # 从API_BASE中推断前端URL
        local frontend_url=$(echo "$API_BASE" | sed 's/backend/frontend/g' | sed 's/:8000//g')
        log_success "🎉 测试注册链接:"
        echo "   $frontend_url/register?invitation_code=$FIRST_CODE"
        echo
        log_info "您现在可以使用这个链接测试完整的注册流程了！"
    fi
    
    echo
    log_info "🔗 相关链接:"
    log_info "   前端应用: $(echo "$API_BASE" | sed 's/backend/frontend/g' | sed 's/:8000//g')"
    log_info "   后端API: $API_BASE"
    log_info "   API文档: $API_BASE/docs"
}

# 执行主函数
main "$@"