# Render 部署配置 (最终版)
services:
  # FastAPI 后端服务
  - type: web
    name: thinktree-backend
    env: python
    # 构建命令：必须先进入 backend 目录，才能找到 requirements.txt
    buildCommand: cd backend && pip install -r requirements.txt
    # 启动命令：
    # 1. 必须先 cd backend 进入正确的目录。
    # 2. 运行 python -c "..."，在代码中手动导入所有模型，确保 create_all() 能找到所有表。
    # 3. 成功创建数据库表后，启动 uvicorn 服务。
    startCommand: cd backend && python -c "import sys; import os; sys.path.append(os.getcwd()); from app.core.database import Base, engine; from app.models import User, Mindmap, InvitationCode, UserCredits, CreditTransaction, RedemptionCode, LoginToken; print('Imported all models. Creating database tables...'); Base.metadata.create_all(bind=engine); print('Tables created successfully.')" && uvicorn main:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: GEMINI_API_KEY
        sync: false # 敏感信息，需在 Render 控制台手动设置
      - key: SECRET_KEY
        sync: false # 敏感信息，需在 Render 控制台手动设置
      - key: DATABASE_URL
        fromDatabase:
          name: thinktree-db
          property: connectionString
      - key: ALGORITHM
        value: HS256
      - key: ACCESS_TOKEN_EXPIRE_MINUTES
        value: 30
      - key: MAX_FILE_SIZE
        value: 10485760
      - key: UPLOAD_DIR
        value: ./uploads

  # Next.js 前端服务 (无改动)
  - type: web
    name: thinktree-frontend
    env: node
    buildCommand: cd frontend && npm install && npm run build
    startCommand: cd frontend && npm start
    healthCheckPath: /api/health
    envVars:
      - key: NEXT_PUBLIC_API_URL
        value: https://thinktree-backend.onrender.com # 后端服务 URL
      - key: NODE_ENV
        value: production
      - key: PORT
        value: "10000"

# PostgreSQL 数据库 (无改动)
databases:
  - name: thinktree-db
    plan: free
