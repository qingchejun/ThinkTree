"""Consolidate all models into a single initial migration

Revision ID: e04d8175225c
Revises: 
Create Date: 2025-08-03 22:58:55.915181

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e04d8175225c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_mindmaps_created_at'), table_name='mindmaps')
    op.drop_index(op.f('ix_mindmaps_id'), table_name='mindmaps')
    op.drop_index(op.f('ix_mindmaps_is_public'), table_name='mindmaps')
    op.drop_index(op.f('ix_mindmaps_share_token'), table_name='mindmaps')
    op.drop_index(op.f('ix_mindmaps_title'), table_name='mindmaps')
    op.drop_index(op.f('ix_mindmaps_user_id'), table_name='mindmaps')
    op.drop_table('mindmaps')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('user_credits')
    op.drop_index(op.f('ix_redemption_codes_code'), table_name='redemption_codes')
    op.drop_index(op.f('ix_redemption_codes_id'), table_name='redemption_codes')
    op.drop_index(op.f('ix_redemption_codes_redeemed_by_user_id'), table_name='redemption_codes')
    op.drop_table('redemption_codes')
    op.drop_index(op.f('ix_credit_transactions_id'), table_name='credit_transactions')
    op.drop_index(op.f('ix_credit_transactions_user_id'), table_name='credit_transactions')
    op.drop_table('credit_transactions')
    op.drop_index(op.f('ix_login_tokens_email'), table_name='login_tokens')
    op.drop_index(op.f('ix_login_tokens_id'), table_name='login_tokens')
    op.drop_index(op.f('ix_login_tokens_magic_token'), table_name='login_tokens')
    op.drop_table('login_tokens')
    op.drop_index(op.f('ix_invitation_codes_code'), table_name='invitation_codes')
    op.drop_index(op.f('ix_invitation_codes_id'), table_name='invitation_codes')
    op.drop_table('invitation_codes')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('invitation_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('generated_by_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('used_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['generated_by_user_id'], ['users.id'], name=op.f('invitation_codes_generated_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['used_by_user_id'], ['users.id'], name=op.f('invitation_codes_used_by_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('invitation_codes_pkey'))
    )
    op.create_index(op.f('ix_invitation_codes_id'), 'invitation_codes', ['id'], unique=False)
    op.create_index(op.f('ix_invitation_codes_code'), 'invitation_codes', ['code'], unique=True)
    op.create_table('login_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('code_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('magic_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('invitation_code', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('login_tokens_pkey'))
    )
    op.create_index(op.f('ix_login_tokens_magic_token'), 'login_tokens', ['magic_token'], unique=True)
    op.create_index(op.f('ix_login_tokens_id'), 'login_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_login_tokens_email'), 'login_tokens', ['email'], unique=False)
    op.create_table('credit_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('INITIAL_GRANT', 'MANUAL_GRANT', 'DEDUCTION', 'REFUND', 'DAILY_REWARD', name='transactiontype'), autoincrement=False, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('credit_transactions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('credit_transactions_pkey'))
    )
    op.create_index(op.f('ix_credit_transactions_user_id'), 'credit_transactions', ['user_id'], unique=False)
    op.create_index(op.f('ix_credit_transactions_id'), 'credit_transactions', ['id'], unique=False)
    op.create_table('redemption_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('credits_amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'REDEEMED', 'EXPIRED', name='redemptioncodestatus'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('redeemed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('redeemed_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['redeemed_by_user_id'], ['users.id'], name=op.f('redemption_codes_redeemed_by_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('redemption_codes_pkey'))
    )
    op.create_index(op.f('ix_redemption_codes_redeemed_by_user_id'), 'redemption_codes', ['redeemed_by_user_id'], unique=False)
    op.create_index(op.f('ix_redemption_codes_id'), 'redemption_codes', ['id'], unique=False)
    op.create_index(op.f('ix_redemption_codes_code'), 'redemption_codes', ['code'], unique=True)
    op.create_table('user_credits',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('balance', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_daily_reward_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_credits_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', name=op.f('user_credits_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('google_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('invitation_quota', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('mindmaps',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('tags', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('share_token', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('mindmaps_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('mindmaps_pkey'))
    )
    op.create_index(op.f('ix_mindmaps_user_id'), 'mindmaps', ['user_id'], unique=False)
    op.create_index(op.f('ix_mindmaps_title'), 'mindmaps', ['title'], unique=False)
    op.create_index(op.f('ix_mindmaps_share_token'), 'mindmaps', ['share_token'], unique=True)
    op.create_index(op.f('ix_mindmaps_is_public'), 'mindmaps', ['is_public'], unique=False)
    op.create_index(op.f('ix_mindmaps_id'), 'mindmaps', ['id'], unique=True)
    op.create_index(op.f('ix_mindmaps_created_at'), 'mindmaps', ['created_at'], unique=False)
    # ### end Alembic commands ###
