#!/usr/bin/env python3
"""
安全的管理员用户和邀请码创建模板脚本

使用前请：
1. 复制此文件为 create_admin.py
2. 设置环境变量或修改配置
3. 运行: python create_admin.py

环境变量说明：
- ADMIN_EMAIL: 管理员邮箱 (默认: admin@example.com)
- ADMIN_PASSWORD: 管理员密码 (必须设置)
- API_BASE_URL: API基础URL (默认: https://thinktree-backend.onrender.com)
- INVITATION_COUNT: 创建邀请码数量 (默认: 5)
"""

import requests
import json
import os
import sys
from getpass import getpass

def get_config():
    """获取配置信息"""
    config = {
        'api_base': os.getenv('API_BASE_URL', 'https://thinktree-backend.onrender.com'),
        'admin_email': os.getenv('ADMIN_EMAIL', 'admin@example.com'),
        'admin_password': os.getenv('ADMIN_PASSWORD'),
        'invitation_count': int(os.getenv('INVITATION_COUNT', '5'))
    }
    
    # 如果密码未通过环境变量设置，交互式输入
    if not config['admin_password']:
        config['admin_password'] = getpass("请输入管理员密码: ")
    
    if not config['admin_password']:
        print("❌ 管理员密码不能为空")
        sys.exit(1)
    
    return config

def create_admin_user(config):
    """创建管理员用户"""
    print("正在创建管理员用户...")
    
    admin_data = {
        "email": config['admin_email'],
        "password": config['admin_password'],
        "invitation_code": "ADMIN_INIT",  # 特殊的管理员初始化码
        "display_name": "ThinkSo Admin"
    }
    
    try:
        response = requests.post(
            f"{config['api_base']}/api/auth/register",
            json=admin_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"注册响应状态: {response.status_code}")
        
        if response.status_code == 200:
            print("✅ 管理员用户创建成功！")
            return True
        else:
            print(f"❌ 管理员用户创建失败")
            print(f"错误信息: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"❌ 网络请求错误: {e}")
        return False
    except Exception as e:
        print(f"❌ 创建管理员用户时出错: {e}")
        return False

def login_admin(config):
    """管理员登录获取token"""
    print("正在登录管理员账户...")
    
    login_data = {
        "email": config['admin_email'],
        "password": config['admin_password']
    }
    
    try:
        response = requests.post(
            f"{config['api_base']}/api/auth/login",
            json=login_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            print("✅ 管理员登录成功！")
            return token
        else:
            print(f"❌ 管理员登录失败")
            print(f"错误信息: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"❌ 网络请求错误: {e}")
        return None
    except Exception as e:
        print(f"❌ 管理员登录时出错: {e}")
        return None

def create_invitation_codes(config, token):
    """创建邀请码"""
    count = config['invitation_count']
    print(f"正在创建 {count} 个邀请码...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    codes = []
    for i in range(count):
        invitation_data = {
            "description": f"管理员创建的邀请码 #{i+1}",
            "expires_at": None  # 永不过期
        }
        
        try:
            response = requests.post(
                f"{config['api_base']}/api/invitations/create",
                json=invitation_data,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                code = data.get("code")
                codes.append(code)
                print(f"✅ 邀请码创建成功: {code}")
            else:
                print(f"❌ 邀请码 #{i+1} 创建失败")
                print(f"错误信息: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"❌ 网络请求错误: {e}")
        except Exception as e:
            print(f"❌ 创建邀请码时出错: {e}")
    
    return codes

def main():
    print("=== ThinkSo 管理员初始化脚本 ===")
    print("注意：请确保后端服务运行正常，且已配置邮件服务")
    print("")
    
    # 获取配置
    try:
        config = get_config()
    except KeyboardInterrupt:
        print("\n\n用户取消操作")
        sys.exit(0)
    
    print(f"API地址: {config['api_base']}")
    print(f"管理员邮箱: {config['admin_email']}")
    print(f"邀请码数量: {config['invitation_count']}")
    print("")
    
    # 确认执行
    try:
        confirm = input("确认执行管理员初始化？(y/N): ").strip().lower()
        if confirm not in ['y', 'yes']:
            print("操作已取消")
            sys.exit(0)
    except KeyboardInterrupt:
        print("\n\n用户取消操作")
        sys.exit(0)
    
    # 步骤1：创建管理员用户
    if not create_admin_user(config):
        print("管理员用户创建失败，脚本终止")
        sys.exit(1)
    
    print("\n等待5秒让服务器处理...")
    import time
    time.sleep(5)
    
    # 步骤2：管理员登录
    token = login_admin(config)
    if not token:
        print("管理员登录失败，脚本终止")
        sys.exit(1)
    
    # 步骤3：创建邀请码
    codes = create_invitation_codes(config, token)
    
    print("\n=== 初始化完成 ===")
    print(f"管理员邮箱: {config['admin_email']}")
    print(f"创建的邀请码数量: {len(codes)}")
    
    if codes:
        print("\n可用的邀请码:")
        for i, code in enumerate(codes, 1):
            print(f"  {i}. {code}")
        
        # 从API_BASE中提取前端URL
        frontend_url = config['api_base'].replace('backend', 'frontend').replace(':8000', '')
        print(f"\n测试注册链接:")
        print(f"{frontend_url}/register?invitation_code={codes[0]}")
    else:
        print("\n⚠️  没有成功创建任何邀请码")

if __name__ == "__main__":
    main()